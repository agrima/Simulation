#include "sim.h"

facility::facility() {
	int i;
	status = 0;
	cusnum = 0;
	for (i = 0; i < NARS_MAX; i ++) {
		arrtime[i] = INF;
		deptime[i] = INF;
	}
	delay = 0;
	queuelen = 0;
	servtime = 0;
}

void facility::reserve() {
	while(status == 1) {}
	sleep(1);
	cout<<"Thread "<<pthread_self()<<" gets facility at time "<<(int)simclock<<endl;
	/* for (int i = 0; i  < THREAD_MAX; i ++) {
		cout << "calentry["<<i<<"].occtime = "<<calentry[i].occtime<<endl;
		sleep(1);
		cout << "calentry["<<i<<"].pid = "<<calentry[i].pid<<endl;
	} */
	sleep(1);
	status = 1;
}

void facility::release() {
	sleep(1);
	cout<<"Thread "<<pthread_self()<<" releases facility at time "<<(int)simclock<<endl;
	sleep(1);
	status = 0;
}

void facility::notice_arrive() {
	int i;
	for (i = 0; i < NARS_MAX; i ++) {
		if (arrtime[i] == INF) {
			break;
		}
	}
	arrtime[i] = (int)simclock;
	sleep(1);
	cout<<"Thread "<<pthread_self()<<" arrives at time "<<(int)simclock<<endl;
	sleep(1);
}

void facility::notice_leave() {
	int i;
	for (i = 0; i < NARS_MAX; i ++) {
		if (deptime[i] == INF) {
			break;
		}
	}
	deptime[i] = (int)simclock;
	sleep(1);
	cout<<"Thread "<<pthread_self()<<" departs at time "<<(int)simclock<<endl;
	sleep(1);
}

void facility::report() {
	int i;
	float sumdelay = 0;
	for (i = 0; i < NARS_MAX; i ++) {
		if (deptime[i] == INF) {
			break;
		}
		cout << "arrtime[i] = "<<arrtime[i]<<endl;
		cout << "deptime[i] = "<<deptime[i]<<endl;
		sumdelay += deptime[i] - arrtime[i];
		cout << "sumdelay = "<<sumdelay<<endl;
		cusnum ++;
	}
	sleep(1);
	cout<<"Total number of customers served is "<<cusnum<<endl;
	sleep(1);
	cout<<"Mean delay in system is "<<sumdelay/cusnum<<endl;
	sleep(1);
}
